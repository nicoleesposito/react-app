{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nicol\\\\Desktop\\\\git-projects\\\\react-app\\\\src\\\\components\\\\Sidebar.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\n/**\r\n * Renders an array of strings passed in that can be filtered and added to as an\r\n * unordered list.\r\n * @returns Component\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Sidebar(_ref) {\n  _s();\n  let {\n    initialMenuItems\n  } = _ref;\n  let [newMenuItem, setNewMenuItem] = useState(\"\");\n  // TODO: 2 Using a state hook, maintain the current menu items as an array state.\n  let [menuItems, setMenuItems] = useState(initialMenuItems);\n  let [filter, setFilter] = useState(\"\");\n  // Adds a single string passed in as parameter to the state element\n  // \"menuItems\" that holds the set of current menu items.\n  let addMenuItem = useCallback(() => {\n    console.log(\"Added menu item\");\n    //   // TODO: 3. Add a new menu item to the correct variable associated with this class.\n    //   // This involves adding a parameter and changing a class instance variable (props).\n    //   setMenuItems([item, ...menuItems])\n    if (newMenuItem !== \"\") {\n      setMenuItems([newMenuItem, ...menuItems]);\n      setNewMenuItem(\"\");\n    }\n  }, [newMenuItem, menuItems]);\n  const menuItemsFiltered = menuItems.filter(item => {\n    const regex = new RegExp(filter, 'i');\n    return item.match(regex) !== null; // Will return true if there's a match\n  });\n\n  // TODO: 1 Render inside the outer div an unordered list of the menu items, with each string in the array\n  // its own item.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: menuItemsFiltered.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"newMenuItemValue\",\n      value: newMenuItem,\n      onChange: event => setNewMenuItem(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        addMenuItem();\n      },\n      children: \"Add Item\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"filter\",\n      type: \"text\",\n      value: filter,\n      onChange: event => setFilter(event.target.value),\n      placeholder: \"Filter by...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(Sidebar, \"/oaa6lp+ngPTBrV4SYZja6S1wK0=\");\n_c = Sidebar;\nvar _c;\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"names":["useState","useCallback","Sidebar","initialMenuItems","newMenuItem","setNewMenuItem","menuItems","setMenuItems","filter","setFilter","addMenuItem","console","log","menuItemsFiltered","item","regex","RegExp","match","map","index","event","target","value"],"sources":["C:/Users/nicol/Desktop/git-projects/react-app/src/components/Sidebar.jsx"],"sourcesContent":["import { useState, useCallback } from \"react\"\r\n/**\r\n * Renders an array of strings passed in that can be filtered and added to as an\r\n * unordered list.\r\n * @returns Component\r\n */\r\nexport default function Sidebar({ initialMenuItems }) {\r\n  let [newMenuItem, setNewMenuItem] = useState(\"\")\r\n  // TODO: 2 Using a state hook, maintain the current menu items as an array state.\r\n  let [menuItems, setMenuItems] = useState(initialMenuItems)\r\n  let [filter, setFilter] = useState(\"\")\r\n  // Adds a single string passed in as parameter to the state element\r\n  // \"menuItems\" that holds the set of current menu items.\r\n  let addMenuItem = useCallback(() => {\r\n    console.log(\"Added menu item\")\r\n    //   // TODO: 3. Add a new menu item to the correct variable associated with this class.\r\n    //   // This involves adding a parameter and changing a class instance variable (props).\r\n    //   setMenuItems([item, ...menuItems])\r\n    if (newMenuItem !== \"\") {\r\n      setMenuItems([newMenuItem, ...menuItems]);\r\n      setNewMenuItem(\"\");\r\n    }\r\n  }, [newMenuItem, menuItems])\r\n\r\n  const menuItemsFiltered = menuItems.filter((item) => {\r\n    const regex = new RegExp(filter, 'i');\r\n    return item.match(regex) !== null;  // Will return true if there's a match\r\n  });\r\n\r\n  // TODO: 1 Render inside the outer div an unordered list of the menu items, with each string in the array\r\n  // its own item.\r\n\r\n  return (\r\n\r\n    <div>\r\n      <ul>\r\n        {menuItemsFiltered.map((item, index) => (\r\n          <li key={index}>{item}</li>\r\n        ))}\r\n      </ul>\r\n\r\n      <input\r\n        type=\"text\"\r\n        id=\"newMenuItemValue\"\r\n        value={newMenuItem}\r\n        onChange={(event) => setNewMenuItem(event.target.value)}\r\n      ></input>\r\n      <br />\r\n      <button\r\n        onClick={() => {\r\n          addMenuItem();\r\n        }}\r\n      >\r\n        Add Item\r\n      </button>\r\n      <br />\r\n      <input\r\n        id=\"filter\"\r\n        type=\"text\"\r\n        value={filter}\r\n        onChange={(event) => setFilter(event.target.value)}\r\n        placeholder=\"Filter by...\"\r\n      ></input>\r\n\r\n    </div>\r\n\r\n  )\r\n}\r\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C;AACA;AACA;AACA;AACA;AAJA;AAKA,eAAe,SAASC,OAAO,OAAuB;EAAA;EAAA,IAAtB;IAAEC;EAAiB,CAAC;EAClD,IAAI,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAChD;EACA,IAAI,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAACG,gBAAgB,CAAC;EAC1D,IAAI,CAACK,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC;EACA;EACA,IAAIU,WAAW,GAAGT,WAAW,CAAC,MAAM;IAClCU,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAC9B;IACA;IACA;IACA,IAAIR,WAAW,KAAK,EAAE,EAAE;MACtBG,YAAY,CAAC,CAACH,WAAW,EAAE,GAAGE,SAAS,CAAC,CAAC;MACzCD,cAAc,CAAC,EAAE,CAAC;IACpB;EACF,CAAC,EAAE,CAACD,WAAW,EAAEE,SAAS,CAAC,CAAC;EAE5B,MAAMO,iBAAiB,GAAGP,SAAS,CAACE,MAAM,CAAEM,IAAI,IAAK;IACnD,MAAMC,KAAK,GAAG,IAAIC,MAAM,CAACR,MAAM,EAAE,GAAG,CAAC;IACrC,OAAOM,IAAI,CAACG,KAAK,CAACF,KAAK,CAAC,KAAK,IAAI,CAAC,CAAE;EACtC,CAAC,CAAC;;EAEF;EACA;;EAEA,oBAEE;IAAA,wBACE;MAAA,UACGF,iBAAiB,CAACK,GAAG,CAAC,CAACJ,IAAI,EAAEK,KAAK,kBACjC;QAAA,UAAiBL;MAAI,GAAZK,KAAK;QAAA;QAAA;QAAA;MAAA,QACf;IAAC;MAAA;MAAA;MAAA;IAAA,QACC,eAEL;MACE,IAAI,EAAC,MAAM;MACX,EAAE,EAAC,kBAAkB;MACrB,KAAK,EAAEf,WAAY;MACnB,QAAQ,EAAGgB,KAAK,IAAKf,cAAc,CAACe,KAAK,CAACC,MAAM,CAACC,KAAK;IAAE;MAAA;MAAA;MAAA;IAAA,QACjD,eACT;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MACE,OAAO,EAAE,MAAM;QACbZ,WAAW,EAAE;MACf,CAAE;MAAA,UACH;IAED;MAAA;MAAA;MAAA;IAAA,QAAS,eACT;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MACE,EAAE,EAAC,QAAQ;MACX,IAAI,EAAC,MAAM;MACX,KAAK,EAAEF,MAAO;MACd,QAAQ,EAAGY,KAAK,IAAKX,SAAS,CAACW,KAAK,CAACC,MAAM,CAACC,KAAK,CAAE;MACnD,WAAW,EAAC;IAAc;MAAA;MAAA;MAAA;IAAA,QACnB;EAAA;IAAA;IAAA;IAAA;EAAA,QAEL;AAGV;AAAC,GA7DuBpB,OAAO;AAAA,KAAPA,OAAO;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}